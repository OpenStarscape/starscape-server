#!/bin/python3

'''
Given the path to an orbit test data JSON file, generates orbit_test_cases.rs

See https://github.com/OpenStarscape/starscape-protocol/tree/master/orbit-tests for input data
'''

import json
import os
import sys
import math

data_url = 'https://github.com/OpenStarscape/starscape-protocol/tree/master/orbit-tests'

# Find output path
output_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'orbit_test_cases.rs')

if len(sys.argv) < 2:
    print('no input file')
    exit(1)
elif len(sys.argv) > 2:
    print('too many arguments')
    exit(1)
elif sys.argv[1] == '--help' or sys.argv[1] == '-h':
    print('USAGE: generate-orbit-test-cases.py /path/to/orbit-test-data.json')
    print('Get test data from ' + data_url)
    exit(0)
else:
    test_data_path = sys.argv[1]

with open(test_data_path, 'r') as f:
    test_data = json.loads(f.read())

print('Loaded ' + str(len(test_data)) + ' test cases')

# Variables used as dictionary keys (results in slightly prettier code)
name = 'name'
orbit = 'orbit'
grav_param = 'grav_param'
period_time = 'period_time'
at_time = 'at_time'
position = 'position'
velocity = 'velocity'

script_path = 'src/' + os.path.realpath(__file__).split('/src/')[-1]
code = '''//! AUTOGENERATED by ''' + script_path+ ''' -- DO NOT EDIT
//! See ''' + data_url + ''' for orbit test documentation

use super::*;
'''

def format_floats(array, names, indent):
    assert len(array) == len(names)
    lines = []
    for item in array:
        line = '\n'
        line += '    ' * indent
        line += str(float(item))
        line += ','
        lines.append(line)
    for i in range(len(names)):
        lines[i] += ' ' * (36 - len(lines[i]))
        lines[i] += '// ' + names[i]
    return ''.join(lines)

orbit_param_names = [
    'semi_major_axis',
    'semi_minor_axis',
    'inclination_angle',
    'ascending_node_angle',
    'periapsis_angle',
    'base_time',
    'period_time',
]
pos_names = ['x', 'y', 'z']
vel_names = ['dx', 'dy', 'dz']

for test in test_data:
    fn_name = test[name].replace(' ', '_')
    code += '''
#[test]
fn ''' + fn_name + '''() {
    run_orbit_test(
        vec![''' + format_floats(test[orbit], orbit_param_names, 3) + '''
        ],''' + format_floats([test[grav_param], test[at_time]], ['grav_param', 'at_time'], 2) + '''
        Point3::new(''' + format_floats(test[position], pos_names, 3) + '''
        ),
        Vector3::new(''' + format_floats(test[velocity], vel_names, 3) + '''
        ),
    );
}
'''

# Delete output file if it already exists
if os.path.exists(output_path):
    print(output_path + ' exists, deleting…')
    os.remove(output_path)

# Write output files
print('writing tests to ' + output_path + '…')
with open(output_path, 'w') as f:
    f.write(code)

print('done')
